// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cdcum
NumericVector cdcum(double a, double b, NumericVector theta);
RcppExport SEXP _ccrtm_cdcum(SEXP aSEXP, SEXP bSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(cdcum(a, b, theta));
    return rcpp_result_gen;
END_RCPP
}
// cambell
NumericVector cambell(double ala, NumericVector tx1, NumericVector tx2);
RcppExport SEXP _ccrtm_cambell(SEXP alaSEXP, SEXP tx1SEXP, SEXP tx2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type ala(alaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tx1(tx1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tx2(tx2SEXP);
    rcpp_result_gen = Rcpp::wrap(cambell(ala, tx1, tx2));
    return rcpp_result_gen;
END_RCPP
}
// cplateModel
List cplateModel(NumericVector r12, NumericVector t12, NumericVector r21, NumericVector t21, NumericVector x, NumericVector y, NumericVector trans, double N);
RcppExport SEXP _ccrtm_cplateModel(SEXP r12SEXP, SEXP t12SEXP, SEXP r21SEXP, SEXP t21SEXP, SEXP xSEXP, SEXP ySEXP, SEXP transSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r12(r12SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t12(t12SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r21(r21SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type t21(t21SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type trans(transSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(cplateModel(r12, t12, r21, t21, x, y, trans, N));
    return rcpp_result_gen;
END_RCPP
}
// ctav
NumericVector ctav(double theta, NumericVector n);
RcppExport SEXP _ccrtm_ctav(SEXP thetaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(ctav(theta, n));
    return rcpp_result_gen;
END_RCPP
}
// cJfunc1
double cJfunc1(double k, double l, double t);
RcppExport SEXP _ccrtm_cJfunc1(SEXP kSEXP, SEXP lSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cJfunc1(k, l, t));
    return rcpp_result_gen;
END_RCPP
}
// cJfunc2or3
double cJfunc2or3(double k, double l, double t);
RcppExport SEXP _ccrtm_cJfunc2or3(SEXP kSEXP, SEXP lSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cJfunc2or3(k, l, t));
    return rcpp_result_gen;
END_RCPP
}
// cJfunc4
double cJfunc4(double m, double t);
RcppExport SEXP _ccrtm_cJfunc4(SEXP mSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(cJfunc4(m, t));
    return rcpp_result_gen;
END_RCPP
}
// cReflTrans
List cReflTrans(NumericVector rho, NumericVector tau, double lai, NumericVector att, NumericVector m, NumericVector sigb, double ks, double ko, NumericVector sf, NumericVector sb, NumericVector vf, NumericVector vb);
RcppExport SEXP _ccrtm_cReflTrans(SEXP rhoSEXP, SEXP tauSEXP, SEXP laiSEXP, SEXP attSEXP, SEXP mSEXP, SEXP sigbSEXP, SEXP ksSEXP, SEXP koSEXP, SEXP sfSEXP, SEXP sbSEXP, SEXP vfSEXP, SEXP vbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lai(laiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type att(attSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigb(sigbSEXP);
    Rcpp::traits::input_parameter< double >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< double >::type ko(koSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sf(sfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sb(sbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vf(vfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type vb(vbSEXP);
    rcpp_result_gen = Rcpp::wrap(cReflTrans(rho, tau, lai, att, m, sigb, ks, ko, sf, sb, vf, vb));
    return rcpp_result_gen;
END_RCPP
}
// cReflTransSingleLayer
List cReflTransSingleLayer(NumericVector rho, NumericVector tau, double lai, double ks, double ko, double sdf, double sdb, double dof, double dob, double sob, double sof, double ddb, double ddf);
RcppExport SEXP _ccrtm_cReflTransSingleLayer(SEXP rhoSEXP, SEXP tauSEXP, SEXP laiSEXP, SEXP ksSEXP, SEXP koSEXP, SEXP sdfSEXP, SEXP sdbSEXP, SEXP dofSEXP, SEXP dobSEXP, SEXP sobSEXP, SEXP sofSEXP, SEXP ddbSEXP, SEXP ddfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lai(laiSEXP);
    Rcpp::traits::input_parameter< double >::type ks(ksSEXP);
    Rcpp::traits::input_parameter< double >::type ko(koSEXP);
    Rcpp::traits::input_parameter< double >::type sdf(sdfSEXP);
    Rcpp::traits::input_parameter< double >::type sdb(sdbSEXP);
    Rcpp::traits::input_parameter< double >::type dof(dofSEXP);
    Rcpp::traits::input_parameter< double >::type dob(dobSEXP);
    Rcpp::traits::input_parameter< double >::type sob(sobSEXP);
    Rcpp::traits::input_parameter< double >::type sof(sofSEXP);
    Rcpp::traits::input_parameter< double >::type ddb(ddbSEXP);
    Rcpp::traits::input_parameter< double >::type ddf(ddfSEXP);
    rcpp_result_gen = Rcpp::wrap(cReflTransSingleLayer(rho, tau, lai, ks, ko, sdf, sdb, dof, dob, sob, sof, ddb, ddf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ccrtm_cdcum", (DL_FUNC) &_ccrtm_cdcum, 3},
    {"_ccrtm_cambell", (DL_FUNC) &_ccrtm_cambell, 3},
    {"_ccrtm_cplateModel", (DL_FUNC) &_ccrtm_cplateModel, 8},
    {"_ccrtm_ctav", (DL_FUNC) &_ccrtm_ctav, 2},
    {"_ccrtm_cJfunc1", (DL_FUNC) &_ccrtm_cJfunc1, 3},
    {"_ccrtm_cJfunc2or3", (DL_FUNC) &_ccrtm_cJfunc2or3, 3},
    {"_ccrtm_cJfunc4", (DL_FUNC) &_ccrtm_cJfunc4, 2},
    {"_ccrtm_cReflTrans", (DL_FUNC) &_ccrtm_cReflTrans, 12},
    {"_ccrtm_cReflTransSingleLayer", (DL_FUNC) &_ccrtm_cReflTransSingleLayer, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_ccrtm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
